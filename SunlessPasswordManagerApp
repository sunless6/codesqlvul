class SunlessPasswordManagerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Sunless Password Manager") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.geometry('560x690')              # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        self.config(bg="#f8fafd")             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        self.resizable(False, False)          # –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
        self.storage_file = None              # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.storage = None                   # –û–±—ä–µ–∫—Ç Storage –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º
        self.outer_password = None            # –í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å (—à–∏—Ñ—Ä—É–µ—Ç –≤–µ—Å—å —Ñ–∞–π–ª)
        self.outer_meta = None                # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–ª–æ—è
        self.inner_json = None                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–ª–æ–≤–∞—Ä—å)
        self.master_key = None                # –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.rsa_private_key = None           # RSA –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (—à–∏—Ñ—Ä—É–µ—Ç –∫–ª—é—á–∏ –∑–∞–ø–∏—Å–µ–π)
        self.rsa_public_key = None            # RSA –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        self.session_active = False           # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        self.session_timer = None             # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–∏—Ä–∞–Ω–∏—è
        self.totp_secret = None               # –°–µ–∫—Ä–µ—Ç –¥–ª—è 2FA
        self._build_login_screen()            # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞

    def _build_login_screen(self):
        # –û—á–∏—â–∞–µ—Ç –æ–∫–Ω–æ –∏ —Å—Ç—Ä–æ–∏—Ç –≤–∏–¥–∂–µ—Ç—ã —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –≤—ã—Ö–æ–¥–∞
        for w in self.winfo_children():
            w.destroy()
        login_frame = tk.Frame(self, bg="#f8fafd")
        login_frame.place(relx=0.5, rely=0.5, anchor='c')
        tk.Label(login_frame, text="üîí", font=('Arial', 40), bg="#f8fafd").pack(pady=(0,20))
        tk.Label(login_frame, text="Sunless Password Manager", font=('Arial', 16, "bold"), bg="#f8fafd").pack(pady=(0,16))
        tk.Button(login_frame, text="–û—Ç–∫—Ä—ã—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", font=("Arial", 12), width=30, command=self.open_existing_storage).pack(pady=6)
        tk.Button(login_frame, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", font=("Arial", 12), width=30, command=self.create_new_storage).pack(pady=6)
        tk.Button(login_frame, text="–í—ã—Ö–æ–¥", font=("Arial", 12), width=30, command=self.quit).pack(pady=(28,4))

    def open_existing_storage(self):
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å.
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ 2FA, –∏ –µ—Å–ª–∏ –¥–∞ ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç _prompt_2fa
        file = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", filetypes=(("Valera files", "*.valera"),("JSON files", "*.json")))
        if not file:
            return
        self.storage_file = file
        self.storage = Storage(self.storage_file)
        self.storage.load()
        outer_password = simpledialog.askstring("–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å:", show="*")
        if not outer_password:
            return
        try:
            decrypted, outer_meta = ExternalEncryptionLayer.unwrap(self.storage.data, outer_password)
        except InvalidTag:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å.")
            return
        except Exception:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–ª–æ—è, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞!")
            return
        self.outer_password = outer_password
        self.outer_meta = outer_meta
        self.inner_json = json.loads(decrypted.decode('utf-8'))
        if "totp_secret" in self.inner_json and self.inner_json["totp_secret"]:
            self._prompt_2fa(self.inner_json["totp_secret"])
        else:
            self._show_password_prompt("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

    def create_new_storage(self):
        # –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ª—å –∏ RSA –∫–ª—é—á–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ñ–∞–π–ª
        file = filedialog.asksaveasfilename(title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", defaultextension=".valera", filetypes=(("Valera files", "*.valera"),("JSON files", "*.json")))
        if not file:
            return
        outer_password = simpledialog.askstring("–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å", "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å:", show="*")
        if not outer_password:
            return
        password = self._ask_two_passwords("–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
        if not password:
            return
        salt = generate_salt()
        key = derive_key(password, salt)
        priv_key, pub_key = generate_rsa_keypair()
        priv_bytes = serialize_private_key(priv_key)
        enc_priv = aes_encrypt(priv_bytes, key)
        pub_bytes = serialize_public_key(pub_key)
        inner_json = {
            "salt": base64.b64encode(salt).decode(),
            "rsa_private": enc_priv,
            "rsa_public": base64.b64encode(pub_bytes).decode(),
            "vault": [],
            "totp_secret": "",
        }
        raw_inner = json.dumps(inner_json).encode()
        ext_layer = ExternalEncryptionLayer.wrap(raw_inner, outer_password)
        storage = Storage(file)
        storage.save(ext_layer.to_bytes())
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–•—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        self._build_login_screen()

    def _ask_two_passwords(self, title):
        # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏, –∏–Ω–∞—á–µ None
        pw1 = simpledialog.askstring(title, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:", show="*")
        if not pw1:
            return None
        pw2 = simpledialog.askstring(title, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:", show="*")
        if pw1 != pw2:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
            return None
        return pw1

    def _show_password_prompt(self, prompt):
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞, —Å—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        pw = simpledialog.askstring("–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", prompt, show="*")
        if not pw:
            return
        salt = base64.b64decode(self.inner_json["salt"])
        enc_priv = self.inner_json["rsa_private"]
        try:
            key = derive_key(pw, salt)
            priv_bytes = aes_decrypt(enc_priv, key)
            priv_key = deserialize_private_key(priv_bytes)
            pub_bytes = base64.b64decode(self.inner_json["rsa_public"])
            pub_key = deserialize_public_key(pub_bytes)
            self.master_key = bytearray(key)
            self.rsa_private_key = priv_key
            self.rsa_public_key = pub_key
            self.session_active = True
            self._build_main_screen()
            self._start_session_timer()
            secure_zero(self.master_key)
        except InvalidTag:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∫–ª—é—á–∞ –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ: {type(e).__name__}: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∫–ª—é—á–∞ –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ.")
            self._build_login_screen()

    def _prompt_2fa(self, secret):
        # –î–∏–∞–ª–æ–≥ 2FA: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø–æ —Å–µ–∫—Ä–µ—Ç–µ, –≤—ã–∑—ã–≤–∞–µ—Ç _show_password_prompt –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        code = simpledialog.askstring("2FA", "–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ Google Authenticator:")
        if not code:
            return
        if pyotp.TOTP(secret).verify(code, valid_window=1):
            self._show_password_prompt("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA")
            self._prompt_2fa(secret)

    def _build_main_screen(self):
        # –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å, –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞, —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π, –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
        for w in self.winfo_children():
            w.destroy()
        self.topbar = tk.Frame(self, bg="#fff", height=54, highlightbackground="#e0e0e0", highlightthickness=1)
        self.topbar.pack(side='top', fill='x')
        self.logo = tk.Label(self.topbar, text="üîí", font=('Arial', 18), bg="#fff")
        self.logo.pack(side='left', padx=12, pady=8)
        self.title_label = tk.Label(self.topbar, text="–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π", font=('Arial', 15, "bold"), bg="#fff")
        self.title_label.pack(side='left', padx=(2,0), pady=8)
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(self.topbar, textvariable=self.search_var, font=('Arial', 11), relief='flat', bg="#f1f3f4", width=22)
        self.search_entry.pack(side='left', padx=26)
        self.search_entry.insert(0, "–ü–æ–∏—Å–∫")
        self.search_var.trace("w", lambda *args: self._update_password_list())
        self.account_btn = tk.Button(self.topbar, text="üßë", bd=0, font=('Arial', 15), bg="#fff", command=self._show_account_menu, cursor="hand2")
        self.account_btn.pack(side='right', padx=16)
        self.list_label = tk.Label(self, text="–°–∞–π—Ç—ã", font=("Arial", 12, "bold"), bg="#f8fafd", anchor="w")
        self.list_label.pack(fill='x', padx=24, pady=(18,0))
        self.list_frame = tk.Frame(self, bg="#f8fafd")
        self.list_frame.pack(fill='both', expand=True, padx=10, pady=(4,0))
        self.add_btn = tk.Button(self, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", font=("Arial", 12), bg="#1976d2", fg="#fff", command=self.add_record, relief="flat", cursor="hand2")
        self.add_btn.pack(side='bottom', pady=10, ipady=3)
        self._update_password_list()

    def _update_password_list(self):
        # –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –ø–æ–∏—Å–∫—É, —Å—Ç—Ä–æ–∏—Ç –≤–∏–¥–∂–µ—Ç—ã
        for w in self.list_frame.winfo_children():
            w.destroy()
        vault = self.inner_json["vault"]
        q = self.search_var.get().lower()
        for idx, entry in enumerate(vault):
            try:
                aes_key = rsa_decrypt(self.rsa_private_key, entry["enc_key"])
                plaintext = aes_decrypt(entry["enc"], aes_key)
                dec = json.loads(plaintext.decode('utf-8'))
                if (q == "–ø–æ–∏—Å–∫" or
                    q in dec["name"].lower() or
                    q in dec["login"].lower() or
                    q in dec.get("url", "").lower()):
                    pe = SunlessPasswordEntry(self.list_frame, dec["name"], dec["login"], dec["password"], dec.get("notes", ""), dec.get("url", ""))
                    pe.pack(fill='x', pady=2)
                    pe.bind('<Button-3>', lambda e, idx=idx: self._show_entry_menu(e, idx))
                secure_zero(aes_key)
                if isinstance(plaintext, bytearray):
                    secure_zero(plaintext)
            except InvalidTag:
                error_label = tk.Label(self.list_frame, text=f"–ó–∞–ø–∏—Å—å {idx+1}: –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞?)", fg="red", bg="#f8fafd")
                error_label.pack(fill='x', pady=1)
            except Exception as e:
                error_label = tk.Label(self.list_frame, text=f"–ó–∞–ø–∏—Å—å {idx+1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ({type(e).__name__})", fg="red", bg="#f8fafd")
                error_label.pack(fill='x', pady=1)

    def add_record(self):
        # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —à–∏—Ñ—Ä—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        dialog = RecordDialog(self, "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.wait_window(dialog)
        if dialog.result:
            name, url, login, password, notes = dialog.result
            aes_key = secrets.token_bytes(AES_KEY_SIZE)
            record_data = json.dumps({
                "name": name, "url": url, "login": login, "password": password, "notes": notes
            }).encode()
            enc = aes_encrypt(record_data, aes_key)
            enc_key = rsa_encrypt(self.rsa_public_key, aes_key)
            entry = {"enc": enc, "enc_key": enc_key}
            self.inner_json["vault"].append(entry)
            self._save_storage()
            self._update_password_list()
            secure_zero(aes_key)
            if isinstance(record_data, bytearray):
                secure_zero(record_data)

    def _save_storage(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (inner_json) –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        raw_inner = json.dumps(self.inner_json).encode()
        ext_layer = ExternalEncryptionLayer.wrap(raw_inner, self.outer_password)
        self.storage.save(ext_layer.to_bytes())

    def _show_entry_menu(self, event, idx):
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å
        menu = tk.Menu(self, tearoff=0)
        menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=lambda: self.edit_record(idx))
        menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=lambda: self.delete_record(idx))
        menu.tk_popup(event.x_root, event.y_root)

    def edit_record(self, idx):
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        entry = self.inner_json["vault"][idx]
        aes_key = rsa_decrypt(self.rsa_private_key, entry["enc_key"])
        plaintext = aes_decrypt(entry["enc"], aes_key)
        dec = json.loads(plaintext.decode('utf-8'))
        dialog = RecordDialog(self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", dec)
        self.wait_window(dialog)
        if dialog.result:
            name, url, login, password, notes = dialog.result
            aes_key2 = secrets.token_bytes(AES_KEY_SIZE)
            record_data = json.dumps({
                "name": name, "url": url, "login": login, "password": password, "notes": notes
            }).encode()
            enc = aes_encrypt(record_data, aes_key2)
            enc_key = rsa_encrypt(self.rsa_public_key, aes_key2)
            self.inner_json["vault"][idx] = {"enc": enc, "enc_key": enc_key}
            self._save_storage()
            self._update_password_list()
            secure_zero(aes_key2)
            if isinstance(record_data, bytearray):
                secure_zero(record_data)
        secure_zero(aes_key)
        if isinstance(plaintext, bytearray):
            secure_zero(plaintext)

    def delete_record(self, idx):
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç
        if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?"):
            del self.inner_json["vault"][idx]
            self._save_storage()
            self._update_password_list()

    def _show_account_menu(self):
        # –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π, 2FA, –≤—ã—Ö–æ–¥
        menu = tk.Menu(self, tearoff=0)
        menu.add_command(label="–°–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", command=self.change_master_password)
        menu.add_command(label="–°–º–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å", command=self.change_outer_password)
        menu.add_separator()
        menu.add_command(label="2FA: –ü—Ä–∏–≤—è–∑–∞—Ç—å Google Authenticator", command=self.attach_2fa)
        menu.add_command(label="2FA: –û—Ç–∫–ª—é—á–∏—Ç—å 2FA", command=self.detach_2fa)
        menu.add_separator()
        menu.add_command(label="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–≤—ã–π—Ç–∏", command=self.logout)
        menu.tk_popup(self.account_btn.winfo_rootx(), self.account_btn.winfo_rooty() + 35)

    def change_master_password(self):
        # –°–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–æ–ª—å –∏ –∫–ª—é—á, –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        old_pw = simpledialog.askstring("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:", show="*")
        if not old_pw:
            return
        salt = base64.b64decode(self.inner_json["salt"])
        try:
            old_key = derive_key(old_pw, salt)
            priv_bytes = aes_decrypt(self.inner_json["rsa_private"], old_key)
        except InvalidTag:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—É—â–∏–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω.")
            return
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
            return
        new_pw = self._ask_two_passwords("–ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")
        if not new_pw:
            return
        new_salt = generate_salt()
        new_key = derive_key(new_pw, new_salt)
        enc_priv = aes_encrypt(priv_bytes, new_key)
        self.inner_json["salt"] = base64.b64encode(new_salt).decode()
        self.inner_json["rsa_private"] = enc_priv
        self._save_storage()
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω.")
        secure_zero(old_key)
        secure_zero(new_key)
        secure_zero(priv_bytes)

    def change_outer_password(self):
        # –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–∞—Ä–æ–ª—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π, –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π
        old_pw = simpledialog.askstring("–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å:", show="*")
        if not old_pw or old_pw != self.outer_password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω.")
            return
        new_pw = simpledialog.askstring("–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å:", show="*")
        if not new_pw:
            return
        raw_inner = json.dumps(self.inner_json).encode()
        ext_layer = ExternalEncryptionLayer.wrap(raw_inner, new_pw)
        self.storage.save(ext_layer.to_bytes())
        self.outer_password = new_pw
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–í–Ω–µ—à–Ω–∏–π –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω.")

    def attach_2fa(self):
        # –ü—Ä–∏–≤—è–∑–∫–∞ Google Authenticator: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥
        if self.inner_json.get("totp_secret"):
            messagebox.showinfo("2FA", "2FA —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
            return
        secret = generate_totp_secret()
        totp_uri = pyotp.totp.TOTP(secret).provisioning_uri(name="SunlessPasswordManager", issuer_name="Sunless")
        qr = qrcode.make(totp_uri)
        qr = qr.resize((200, 200))
        top = tk.Toplevel(self)
        top.title("QR –¥–ª—è Google Authenticator")
        qr_img = ImageTk.PhotoImage(qr)
        lbl = tk.Label(top, image=qr_img)
        lbl.image = qr_img
        lbl.pack()
        tk.Label(top, text=f"–°–µ–∫—Ä–µ—Ç: {secret}", font=("Arial", 10)).pack()
        code = simpledialog.askstring("2FA", "–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ Google Authenticator –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        if pyotp.TOTP(secret).verify(code, valid_window=1):
            self.inner_json["totp_secret"] = secret
            self._save_storage()
            messagebox.showinfo("2FA", "2FA —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.")
            top.destroy()
        else:
            messagebox.showerror("2FA", "–ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            top.destroy()

    def detach_2fa(self):
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥, –æ—á–∏—â–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç
        if not self.inner_json.get("totp_secret"):
            messagebox.showinfo("2FA", "2FA –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
            return
        code = simpledialog.askstring("2FA", "–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ Google Authenticator –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:")
        if pyotp.TOTP(self.inner_json["totp_secret"]).verify(code, valid_window=1):
            self.inner_json["totp_secret"] = ""
            self._save_storage()
            messagebox.showinfo("2FA", "2FA –æ—Ç–∫–ª—é—á—ë–Ω.")
        else:
            messagebox.showerror("2FA", "–ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω.")

    def logout(self):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª—é—á–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        self.session_active = False
        self.master_key = None
        self.rsa_private_key = None
        self.rsa_public_key = None
        if self.session_timer:
            self.session_timer.cancel()
        self._build_login_screen()

    def _start_session_timer(self):
        # –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–ø–∏—Ä–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
        if self.session_timer:
            self.session_timer.cancel()
        self.session_timer = threading.Timer(SESSION_TIMEOUT, self._auto_lock)
        self.session_timer.daemon = True
        self.session_timer.start()

    def _auto_lock(self):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞
        messagebox.showinfo("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–°–µ—Å—Å–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
        self.logout()
